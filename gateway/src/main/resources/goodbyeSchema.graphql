schema {
    query: Query
}

"Directs the executor to include this field or fragment only when the `if` argument is true"
directive @include(
    "Included when true."
    if: Boolean!
) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

"Directs the executor to skip this field or fragment when the `if`'argument is true."
directive @skip(
    "Skipped when true."
    if: Boolean!
) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

"Marks target field as external meaning it will be resolved by federated schema"
directive @external on FIELD_DEFINITION

"Marks target object as extending part of the federated schema"
directive @extends on OBJECT | INTERFACE

"Space separated list of primary keys needed to access federated object"
directive @key(fields: _FieldSet!) on OBJECT | INTERFACE

"Marks the field or enum value as deprecated"
directive @deprecated(
    "The reason for the deprecation"
    reason: String = "No longer supported"
) on FIELD_DEFINITION | ENUM_VALUE

"Exposes a URL that specifies the behaviour of this scalar."
directive @specifiedBy(
    "The URL that specifies the behaviour of this scalar."
    url: String!
) on SCALAR

"Specifies required input field set from the base type for a resolver"
directive @requires(fields: _FieldSet) on FIELD_DEFINITION

"Specifies the base type field set that will be selectable by the gateway"
directive @provides(fields: _FieldSet) on FIELD_DEFINITION

union _Entity = Bar

type Bar @extends @key(fields : "id") {
    federated: String!
    id: Int! @external
}

type Query @extends {
    "Union of all types that use the @key directive, including both types native to the schema and extended types"
    _entities(representations: [_Any!]!): [_Entity]!
    _service: _Service
    goodbyeWorld(name: String): String!
}

type _Service {
    sdl: String!
}

"Federation scalar type used to represent any external entities passed to _entities query."
scalar _Any

"Federation type representing set of fields"
scalar _FieldSet